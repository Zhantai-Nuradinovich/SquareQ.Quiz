@using Oqtane.Modules.Controls
@using SquareQ.Quiz.Services
@using SquareQ.Quiz.Models

@inherits ModuleBase
@inject IQuestionService QuestionService
@inject NavigationManager NavigationManager

<h4>Add a new question</h4>

@if (_question != null)
{
    <table class="table table-borderless">
        <tr>
            <td>
                <Label For="question" HelpText="Enter a question">Question: </Label>
            </td>
            <td>
                <input id="question" class="form-control" @bind="@_question.Text" />
            </td>
        </tr>
        <tr>
            <td>
                <Label For="picture" HelpText="Enter a path for picture">Picture Path: </Label>
            </td>
            <td>
                <input id="picture" class="form-control" @bind="@_question.PicturePath" />
            </td>
        </tr>
        <tr>
            <td>
                <Label For="answ" HelpText="Enter answers">Answers: </Label>
            </td>
            <td>
                @if (_question.QuestionId > 0)
                {
                    <EditAnswers QuestionID="@_question.QuestionId" />
                }
                else
                {
                    <button type="button" class="btn btn-success" @onclick="AddNew">+</button>
                }
            </td>
        </tr>
        <tr>
            <td>
                <Label For="qtype" HelpText="Enter question type">Question type: </Label>
            </td>
            <td>
                <input id="qtype" class="form-control" @bind="@_question.QuestionType" />
            </td>
        </tr>
        <tr>
            <td>
                <Label For="seconds" HelpText="Enter number of secodns, before image will be disapeared (if applicable)">Seconds: </Label>
            </td>
            <td>
                <input id="seconds" class="form-control" @bind="@_question.SecondsforPicture" />
            </td>
        </tr>
    </table>
}

<button type="button" class="btn btn-success" @onclick="Save">Save</button>
<button type="button" class="btn btn-success" @onclick="AddNew">Add New</button>
<button type="button" class="btn btn-success" @onclick="Next">Next</button>
<br />
<br />

@code {
    [Parameter]
    public int Id { get; set; }

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage Question";

    List<Question> _questions;

    Question _question;
    IEnumerator<Question> enumerator;

    protected override async Task OnInitializedAsync()
    {
        await GetItems();
    }

    private async Task GetItems()
    {
        try
        {
            _questions = await QuestionService.GetQuestionsAsync(Id);

            if (_questions == null)
            {
                _questions = new List<Question>();
                _question = new Question()
                {
                    QuizID = Id,
                    PicturePath = "",
                    Text = "",
                    QuestionType = ""
                };

                _questions.Add(_question);
            }

            enumerator = _questions.GetEnumerator();

            if (enumerator.MoveNext())
                _question = enumerator.Current;
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Questions {QuizId} {Error}", Id, ex.Message);
            AddModuleMessage("Error Loading QuizItems", MessageType.Error);
        }
    }

    private async Task AddNew()
    {
        try
        {
            _question = await QuestionService.AddQuestionAsync(_question);
            await logger.LogInformation("Question Added {_question}", _question);

            await GetItems();
            //NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding Question {Error}", ex.Message);
            AddModuleMessage("Error Adding Question", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            Question Question = await QuestionService.GetQuestionAsync(_question.QuestionId, _question.QuizID);
            Question.Text = _question.Text;
            Question.QuestionType = _question.QuestionType;
            Question.PicturePath = _question.PicturePath;
            Question.SecondsforPicture = _question.SecondsforPicture;
            Question.QuizID = Id;

            await QuestionService.UpdateQuestionAsync(Question);
            await logger.LogInformation("Question Updated {Question}", Question);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Question {Error}", ex.Message);
            AddModuleMessage("Error Saving Question", MessageType.Error);
        }
    }

    private async Task Next()
    {
        try
        {
            if (enumerator.MoveNext())
            {
                _question = enumerator.Current;
            }
            else
            {
                _question = new Question()
                {
                    QuizID = Id,
                    PicturePath = "",
                    Text = "",
                    QuestionType = ""
                };
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Enumerating QuizItem {Error}", ex.Message);
            AddModuleMessage("Error Enumerating QuizItem", MessageType.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }
}
