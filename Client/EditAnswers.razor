@using Oqtane.Modules.Controls
@using SquareQ.Quiz.Services
@using SquareQ.Quiz.Models

@inherits ModuleBase
@inject IAnswerService AnswerService
@inject NavigationManager NavigationManager


@if (_answers != null)
{
    @foreach (var answer in _answers)
    {
        <div class="col-md-4">
            <div class='form-group internal'>
                <button type="button" class="btn btn-danger" @onclick="() => Delete(answer)">Delete</button>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class='form-group internal'>
                    <input class="form-control" @bind="@answer.Text" placeholder="Answer" />
                </div>
            </div>
            <div class="col-md-4">
                <div class='form-group internal'>
                    <input type="checkbox" class="form-control" @bind="@answer.IsCorrect" />
                </div>
            </div>
            <div class="col-md-4">
                <div class='form-group internal'>
                    <button type="button" class="btn btn-success" @onclick="() => Save(answer)">Save</button>
                </div>
            </div>
        </div>
        <br />
        <br />
    }
    <button type="button" class="btn btn-success" @onclick="Add">+</button>
}

@code {
    [Parameter]
    public int QuestionID { get; set; }

    [Parameter]
    public List<Answer> _answers { get; set; }

    Answer _answer;

    public async Task GetAnswers(int QuestionID) //Вынести в едитквестчонс методы
    {
        try
        {
            _answer = new Answer()
            {
                QuestionID = QuestionID,
                Text = "Change me, please!!"
            };

            _answers = await AnswerService.GetAnswersAsync(QuestionID);

            if (_answers == null)
            {
                _answers = new List<Answer>();

                _answers.Add(_answer);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Answers {QuestionID} {Error}", QuestionID, ex.Message);
            AddModuleMessage("Error Loading Answers", MessageType.Error);
        }
    }

    private async Task Add()
    {
        try
        {
            if (_answer == null)
                _answer = new Answer() { IsCorrect = false, Text = "Change me, please!!", QuestionID = QuestionID };

            _answer = await AnswerService.AddAnswerAsync(_answer);
            await logger.LogInformation("Answer Added {_answer}", _answer);

            await GetAnswers(QuestionID);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding Answer {Error}", ex.Message);
            AddModuleMessage("Error Adding Answer", MessageType.Error);
        }
    }

    private async Task Save(Answer _answer)
    {
        try
        {
            Answer Answer = await AnswerService.GetAnswerAsync(_answer.AnswerId, _answer.QuestionID);
            Answer.Text = _answer.Text;
            Answer.IsCorrect = _answer.IsCorrect;

            await AnswerService.UpdateAnswerAsync(Answer);
            await logger.LogInformation("Answer Updated {Answer}", Answer);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Answer {Error}", ex.Message);
            AddModuleMessage("Error Saving Answer", MessageType.Error);
        }
    }

    private async Task Delete(Answer _answer)
    {
        try
        {
            await AnswerService.DeleteAnswerAsync(_answer.AnswerId, _answer.QuestionID);
            await logger.LogInformation("Answer Deleted {Answer}", _answer);
            _answers = await AnswerService.GetAnswersAsync(_answer.QuestionID);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Answer {_answer} {Error}", _answer, ex.Message);
            AddModuleMessage("Error Deleting Answer", MessageType.Error);
        }
    }
}
