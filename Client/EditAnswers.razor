@using Oqtane.Modules.Controls
@using SquareQ.Quiz.Services
@using SquareQ.Quiz.Models

@inherits ModuleBase
@inject IAnswerService AnswerService
@inject NavigationManager NavigationManager


@if (_answers != null)
{
    <div class="group">
        @foreach (var answer in _answers)
        {
            <div class="col-md-8">
                <div class="col-md-2">
                    <div class='form-group internal'>
                        <input class="form-control col-md-8" type="text" @bind="@_answer.Text" placeholder="Answer" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class='form-group internal'>
                        <input class="form-control col-md-8" type="checkbox" @bind="@_answer.IsCorrect" placeholder="Is correct" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class='form-group internal'>
                        <button type="button" class="btn btn-success" @onclick="() => Save(answer)">Save</button>
                    </div>
                </div>
            </div>
            <br />
            <br />
        }
        <button type="button" class="btn btn-success" @onclick="Add">+</button>
    </div>
}


@code {
    [Parameter]
    public int QuestionID { get; set; }

    public List<Answer> _answers { get; set; }

    Answer _answer;

    protected override async Task OnInitializedAsync()
    {
        await GetAnswers();
    }

    private async Task GetAnswers()
    {
        try
        {
            _answers = await AnswerService.GetAnswersAsync(QuestionID);

            if (_answers == null)
            {
                _answers = new List<Answer>();
                _answer = new Answer()
                {
                    QuestionID = QuestionID,
                    Text = ""
                };

                _answers.Add(_answer);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Answers {QuestionID} {Error}", QuestionID, ex.Message);
            AddModuleMessage("Error Loading Answers", MessageType.Error);
        }
    }

    private async Task Add()
    {
        try
        {
            if (_answer == null)
                _answer = new Answer() { IsCorrect = false, Text = "Change me, please!!", QuestionID = QuestionID };

            _answer = await AnswerService.AddAnswerAsync(_answer);
            await logger.LogInformation("Answer Added {_answer}", _answer);

            await GetAnswers();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding Answer {Error}", ex.Message);
            AddModuleMessage("Error Adding Answer", MessageType.Error);
        }
    }

    private async Task Save(Answer _answer)
    {
        try
        {
            Answer Answer = await AnswerService.GetAnswerAsync(_answer.AnswerId, _answer.QuestionID);
            Answer.Text = _answer.Text;
            Answer.IsCorrect = _answer.IsCorrect;

            await AnswerService.UpdateAnswerAsync(Answer);
            await logger.LogInformation("Answer Updated {Answer}", Answer);
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Answer {Error}", ex.Message);
            AddModuleMessage("Error Saving Answer", MessageType.Error);
        }
    }
}
