@using Oqtane.Modules.Controls
@using SquareQ.Quiz.Services
@using SquareQ.Quiz.Models

@inherits ModuleBase
@inject IAnswerService AnswerService
@inject NavigationManager NavigationManager


<div class="group">
    @foreach (var answer in _answers)
    {
        <div class="group-item">
            <input class="form-control" @bind="@_answer.Text" placeholder="Answer" />
            <input type="checkbox" @bind="@_answer.IsCorrect" placeholder="Is correct" />
        </div>
        <br />
        <br />
    }
    <button @onclick="Prepare">+</button>
    <button @onclick="Save">Save</button>
</div>


@code {
    [Parameter]
    public int QuestionID { get; set; }

    public List<Answer> _answers { get; set; }

    Answer _answer;

    protected override async Task OnInitializedAsync()
    {
        await GetAnswers();
    }

    private async Task GetAnswers()
    {
        try
        {
            _answers = await AnswerService.GetAnswersAsync(QuestionID);

            if (_answers == null)
            {
                _answers = new List<Answer>();
                _answer = new Answer()
                {
                    QuestionID = QuestionID,
                    Text = ""
                };

                _answers.Add(_answer);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Answers {QuestionID} {Error}", QuestionID, ex.Message);
            AddModuleMessage("Error Loading Answers", MessageType.Error);
        }
    }

    private async Task Prepare()
    {
        try
        {
            _answer = await AnswerService.AddAnswerAsync(_answer);
            await logger.LogInformation("Answer Added {_answer}", _answer);

            await GetAnswers();
            //NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding Answer {Error}", ex.Message);
            AddModuleMessage("Error Adding Answer", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            Answer Answer = await AnswerService.GetAnswerAsync(_answer.AnswerId, _answer.QuestionID);
            Answer.Text = _answer.Text;
            Answer.IsCorrect = _answer.IsCorrect;

            await AnswerService.UpdateAnswerAsync(Answer);
            await logger.LogInformation("Answer Updated {Answer}", Answer);
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Answer {Error}", ex.Message);
            AddModuleMessage("Error Saving Answer", MessageType.Error);
        }
    }
}
